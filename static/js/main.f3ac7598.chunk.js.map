{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","section","Title","h1","ListItem","li","App","useState","beer","setBeer","loading","setLoading","error","message","setError","getter","a","fetch","response","status","Error","json","data","console","log","useEffect","name","tagline","abv","ibu","target_fg","target_og","srm","ph","attenuation_level","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAiBMA,EAAUC,IAAOC,QAAV,wGAMPC,EAAQF,IAAOG,GAAV,mDAILC,EAAWJ,IAAOK,GAAV,qEA6ECC,EAxEH,WAEV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,CACjCK,OAAO,EACPC,QAAS,KAFX,mBAAOD,EAAP,KAAcE,EAAd,KAKMC,EAAM,uCAAG,8BAAAC,EAAA,sEAEXL,GAAW,GAFA,SAGYM,MAAM,2CAHlB,UAIY,OADjBC,EAHK,QAICC,OAJD,sBAKH,IAAIC,MAAM,cALP,uBAOQF,EAASG,OAPjB,OAOLC,EAPK,OAQXb,EAAQa,EAAK,IACbC,QAAQC,IAAIF,GACZX,GAAW,GAVA,kDAYXG,EAAS,CAAEF,OAAO,EAAMC,QAAS,KAAMA,UAZ5B,0DAAH,qDAoBZ,OAJAY,qBAAU,WACRV,MACA,IAECH,EAAMA,MACA,6BAAKA,EAAMC,UAGlB,cAAC,IAAD,UACE,eAACd,EAAD,WACE,cAACG,EAAD,oCACCQ,EAAU,2CAEX,gCACE,gCACE,6BAAKF,EAAKkB,OACV,6BAAKlB,EAAKmB,aAEZ,gCACE,4CACA,wCACA,+BACE,eAACvB,EAAD,mBAAgBI,EAAKoB,OACrB,eAACxB,EAAD,mBAAgBI,EAAKqB,OACrB,eAACzB,EAAD,yBAAsBI,EAAKsB,aAC3B,eAAC1B,EAAD,yBAAsBI,EAAKuB,aAC3B,eAAC3B,EAAD,mBAAgBI,EAAKwB,OACrB,eAAC5B,EAAD,kBAAeI,EAAKyB,MACpB,eAAC7B,EAAD,iCAA8BI,EAAK0B,wBAKrC,6CACA,sCAEA,sCACA,6CAIJ,wBAAQC,QAASpB,EAAjB,4BCtFOqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f3ac7598.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport MaltList from \"./components/MaltList\"\n\nimport { \n  BrowserRouter as Router, \n  Switch, \n  Route, \n  Link \n} from \"react-router-dom\"\n\n// fetch random beer from punkapi\n//useEffect to fetch beer on load and button to fetch new beer\n// display beer stats\n// update stats with recipe scaling\n\nconst Wrapper = styled.section `\n  background: palegoldenrod;\n  display: flex;\n  justify-content: center;\n`\n\nconst Title = styled.h1 `\n  text-align: center;\n`\n\nconst ListItem = styled.li `\n  text-align: left;\n  font-size: 20px;\n`\n\nconst App = () => {\n\n  const [beer, setBeer] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState({\n    error: false,\n    message: \"\"\n  })\n\n  const getter = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch(\"https://api.punkapi.com/v2/beers/random\")\n      if(response.status !== 200){\n        throw new Error(\"I am error\")\n      }\n      const data = await response.json()\n      setBeer(data[0])\n      console.log(data)\n      setLoading(false)\n    } catch (error) {\n      setError({ error: true, message: error.message })\n    }\n  }\n\n  useEffect(() => {\n    getter()\n  },[])\n\n  if(error.error){\n    return <h1>{error.message}</h1>\n  }\n  return (\n    <Router>\n      <Wrapper>\n        <Title>Mediocre beer recipes</Title>\n        {loading ? <p>loading...</p>\n        :\n        <div>\n          <div>\n            <h2>{beer.name}</h2>\n            <h3>{beer.tagline}</h3>\n          </div>\n          <div>\n            <h2>Statistics</h2>\n            <h3>Volume</h3>\n            <ul>\n              <ListItem>ABV: {beer.abv}</ListItem>\n              <ListItem>IBU: {beer.ibu}</ListItem>\n              <ListItem>Target fg: {beer.target_fg}</ListItem>\n              <ListItem>Target og: {beer.target_og}</ListItem>\n              <ListItem>SRM: {beer.srm}</ListItem>\n              <ListItem>ph: {beer.ph}</ListItem>\n              <ListItem>Attenuation level: {beer.attenuation_level}</ListItem>\n              {/* <ListItem>Mash temperature: {beer.method.mash_temp[0].temp.value}°C</ListItem>\n              <ListItem>Fermentation temperature: {beer.method.fermentation.temp.value}°C</ListItem>\n              <ListItem>Boil volume: {beer.boil_volume.value}l</ListItem> */}\n            </ul>\n            <h2>Ingredients</h2>\n            <h3>Malt</h3>\n            {/* <MaltList malts={beer.ingredients.malt} /> */}\n            <h3>Hops</h3>\n            <h3>Yeast</h3>\n          </div>\n        </div>\n        }\n        <button onClick={getter} >get data</button>\n      </Wrapper>\n    </Router>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}